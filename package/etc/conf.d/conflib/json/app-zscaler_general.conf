block parser zscaler_lss-parser() {    
 channel {
        rewrite {
            r_set_splunk_dest_default(
                index("netops")
                sourcetype('zscalerlss-unknown')
                vendor_product("zscaler_unknown")
            );                                          
        };
        
        if {
            filter {
                "${.json.product}" eq "alerts"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netops")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "dns"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netdns")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "fw"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netfw")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "web"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netproxy")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "tunnel"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netfw")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "tunnel"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netfw")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "web"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netproxy")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "zia-audit"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netops")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" eq "zia-sandbox"
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netops")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(lowercase "${.json.vendor}_${.json.product}")")
                );                                          
            };           
        } elif {
            filter {
                "${.json.product}" ne ""
                and "${.json.sourcetype}" ne ""
            };
            rewrite {
                r_set_splunk_dest_update(
                    index("netops")
                    sourcetype('${.json.sourcetype}')
                    vendor_product("$(replace-delimiter "-" "_" $(lowercase "${.json.vendor}_${.json.product}"))")
                );                                          
            };           

        } elif {
            filter {
                match('.' value('.json.Connector'))
                and match('.' value('.json.Customer'))
                and match('.' value('.json.ConnectorGroup'))
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-connector')
                    vendor_product("zscaler_lss")
                );                                          
            };                       
        } elif {
            filter {
                "${.json.Product}" eq "zpa_auth"
            };
            rewrite {
                r_set_splunk_dest_default(
                    index("netproxy")
                    sourcetype('zscalerlss-zpa-auth')
                    vendor_product("zscaler_lss")
                );                                          
            };                       
        };
        if {
            filter {
                "${.json.LogTimestamp}" ne ""
            };
            parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser(
                    format('%a %b %d %H:%M:%S %Y',
                        '%a %b %d %k:%M:%S %Y')
                    template("${.json.LogTimestamp}")
                    flags(guess-timezone)
                );
            };        
        };
        if {
            filter {
                "${.json.event.datetime}" ne ""
            };
            parser {
                #.jsonLog.Timestamp Mar 04 20:37:53 2020
                date-parser(
                    format('%a %b %d %H:%M:%S %Y',
                        '%a %b %d %k:%M:%S %Y')
                    template("${.json.event.datetimeq}")
                    flags(guess-timezone)
                );
            };        
        };
        

   };
};
application zscaler_lss[json] {
    filter {
        match('^Zscaler' value('.json.vendor') flags(ignore-case))
    };
	parser { zscaler_lss-parser(); };   
};

